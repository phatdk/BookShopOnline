// <auto-generated />
using System;
using BookShopDAL.ApplicationDBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookShopDAL.Migrations
{
    [DbContext(typeof(BookShopDBContext))]
    [Migration("20230716234814_v0.1")]
    partial class v01
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BookShopDAL.Entity.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Admin", (string)null);
                });

            modelBuilder.Entity("BookShopDAL.Entity.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Birth")
                        .HasColumnType("varchar(13)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<int?>("Index")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Author", (string)null);
                });

            modelBuilder.Entity("BookShopDAL.Entity.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cover")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ISBN")
                        .HasColumnType("varchar(50)");

                    b.Property<Guid?>("Id_Brand")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Id_Collection")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id_Genre")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id_Publisher")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ImportPrice")
                        .HasColumnType("int");

                    b.Property<string>("PageSize")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<int>("Pages")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Reader")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("Id_Brand");

                    b.HasIndex("Id_Collection");

                    b.HasIndex("Id_Genre");

                    b.HasIndex("Id_Publisher");

                    b.ToTable("Book", (string)null);
                });

            modelBuilder.Entity("BookShopDAL.Entity.Book_Author", b =>
                {
                    b.Property<Guid>("Id_Book")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id_Author")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id_Book", "Id_Author");

                    b.HasIndex("Id_Author");

                    b.ToTable("Book_Author", (string)null);
                });

            modelBuilder.Entity("BookShopDAL.Entity.Book_Promotion", b =>
                {
                    b.Property<Guid>("Id_Promotion")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id_Book")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Index")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id_Promotion", "Id_Book");

                    b.HasIndex("Id_Book");

                    b.ToTable("Book_Promotion", (string)null);
                });

            modelBuilder.Entity("BookShopDAL.Entity.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Brand", (string)null);
                });

            modelBuilder.Entity("BookShopDAL.Entity.Cart", b =>
                {
                    b.Property<Guid>("Id_Customer")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id_Book")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id_Customer", "Id_Book");

                    b.HasIndex("Id_Book");

                    b.ToTable("Cart", (string)null);
                });

            modelBuilder.Entity("BookShopDAL.Entity.Collection_Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Collection_Book", (string)null);
                });

            modelBuilder.Entity("BookShopDAL.Entity.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("Id_Book")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Id_Customer")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Id_Parents")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Id_Book");

                    b.HasIndex("Id_Customer");

                    b.HasIndex("Id_Parents");

                    b.ToTable("Comment", (string)null);
                });

            modelBuilder.Entity("BookShopDAL.Entity.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("Birth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phones")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("WalletPoint")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("BookShopDAL.Entity.Customer_Promotion", b =>
                {
                    b.Property<Guid>("Id_Customer")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id_Promotion")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id_Customer", "Id_Promotion");

                    b.HasIndex("Id_Promotion");

                    b.ToTable("Customer_Promotion", (string)null);
                });

            modelBuilder.Entity("BookShopDAL.Entity.Delivery_Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id_Customer")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id_Customer");

                    b.ToTable("Delivery_Address", (string)null);
                });

            modelBuilder.Entity("BookShopDAL.Entity.Evaluate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id_Book")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id_Customer")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Point")
                        .HasColumnType("int");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id_Book");

                    b.HasIndex("Id_Customer");

                    b.ToTable("Evaluate", (string)null);
                });

            modelBuilder.Entity("BookShopDAL.Entity.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("Index")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Genre", (string)null);
                });

            modelBuilder.Entity("BookShopDAL.Entity.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id_Parents")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Index")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id_Parents");

                    b.ToTable("Image", (string)null);
                });

            modelBuilder.Entity("BookShopDAL.Entity.News", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("News", (string)null);
                });

            modelBuilder.Entity("BookShopDAL.Entity.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AcceptDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(13)");

                    b.Property<DateTime?>("CompleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeliveryCharges")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id_Address")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id_Customer")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id_PaymentForm")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyNotes")
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phones")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)");

                    b.Property<DateTime?>("ReceiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Receiver")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id_Address");

                    b.HasIndex("Id_Customer");

                    b.HasIndex("Id_PaymentForm");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("BookShopDAL.Entity.Order_Book", b =>
                {
                    b.Property<Guid>("Id_Order")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id_Book")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id_Order", "Id_Book");

                    b.HasIndex("Id_Book");

                    b.ToTable("Order_Book", (string)null);
                });

            modelBuilder.Entity("BookShopDAL.Entity.Order_Promotion", b =>
                {
                    b.Property<Guid>("Id_Order")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id_Promotion")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ReduceAmount")
                        .HasColumnType("int");

                    b.Property<int>("ReduceMax")
                        .HasColumnType("int");

                    b.HasKey("Id_Order", "Id_Promotion");

                    b.HasIndex("Id_Promotion");

                    b.ToTable("Order_Promotion", (string)null);
                });

            modelBuilder.Entity("BookShopDAL.Entity.Payment_Form", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Payment_Form", (string)null);
                });

            modelBuilder.Entity("BookShopDAL.Entity.Promotion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(13)");

                    b.Property<int?>("Condition")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id_PromotionType")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ReduceAmount")
                        .HasColumnType("int");

                    b.Property<int>("ReduceMax")
                        .HasColumnType("int");

                    b.Property<float?>("ReduceRate")
                        .HasColumnType("real");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id_PromotionType");

                    b.ToTable("Promotion", (string)null);
                });

            modelBuilder.Entity("BookShopDAL.Entity.Promotion_Type", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Promotion_Type", (string)null);
                });

            modelBuilder.Entity("BookShopDAL.Entity.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("Index")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Publisher", (string)null);
                });

            modelBuilder.Entity("BookShopDAL.Entity.ReturnOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id_Order")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id_Order");

                    b.ToTable("ReturnOrderConfiguration", (string)null);
                });

            modelBuilder.Entity("BookShopDAL.Entity.Shop", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Phones")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)");

                    b.Property<string>("ShopName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Shop", (string)null);
                });

            modelBuilder.Entity("BookShopDAL.Entity.WishList", b =>
                {
                    b.Property<Guid>("Id_Customer")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id_Book")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id_Customer", "Id_Book");

                    b.HasIndex("Id_Book");

                    b.ToTable("WishList", (string)null);
                });

            modelBuilder.Entity("BookShopDAL.Entity.Book", b =>
                {
                    b.HasOne("BookShopDAL.Entity.Brand", "brand")
                        .WithMany("books")
                        .HasForeignKey("Id_Brand")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BookShopDAL.Entity.Collection_Book", "collection_Book")
                        .WithMany("books")
                        .HasForeignKey("Id_Collection")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BookShopDAL.Entity.Genre", "genre")
                        .WithMany("books")
                        .HasForeignKey("Id_Genre")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookShopDAL.Entity.Publisher", "publisher")
                        .WithMany("books")
                        .HasForeignKey("Id_Publisher")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("brand");

                    b.Navigation("collection_Book");

                    b.Navigation("genre");

                    b.Navigation("publisher");
                });

            modelBuilder.Entity("BookShopDAL.Entity.Book_Author", b =>
                {
                    b.HasOne("BookShopDAL.Entity.Author", "author")
                        .WithMany("book_Authors")
                        .HasForeignKey("Id_Author")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookShopDAL.Entity.Book", "book")
                        .WithMany("book_Authors")
                        .HasForeignKey("Id_Book")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("author");

                    b.Navigation("book");
                });

            modelBuilder.Entity("BookShopDAL.Entity.Book_Promotion", b =>
                {
                    b.HasOne("BookShopDAL.Entity.Book", "book")
                        .WithMany("book_Promotions")
                        .HasForeignKey("Id_Book")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookShopDAL.Entity.Promotion", "promotion")
                        .WithMany("book_Promotions")
                        .HasForeignKey("Id_Promotion")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("book");

                    b.Navigation("promotion");
                });

            modelBuilder.Entity("BookShopDAL.Entity.Cart", b =>
                {
                    b.HasOne("BookShopDAL.Entity.Book", "book")
                        .WithMany("carts")
                        .HasForeignKey("Id_Book")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookShopDAL.Entity.Customer", "customer")
                        .WithMany("carts")
                        .HasForeignKey("Id_Customer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("book");

                    b.Navigation("customer");
                });

            modelBuilder.Entity("BookShopDAL.Entity.Comment", b =>
                {
                    b.HasOne("BookShopDAL.Entity.Book", "book")
                        .WithMany("comments")
                        .HasForeignKey("Id_Book")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BookShopDAL.Entity.Customer", "customer")
                        .WithMany("comments")
                        .HasForeignKey("Id_Customer")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BookShopDAL.Entity.Comment", "comment")
                        .WithMany("comments")
                        .HasForeignKey("Id_Parents")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BookShopDAL.Entity.Evaluate", "evaluate")
                        .WithMany("comments")
                        .HasForeignKey("Id_Parents")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("book");

                    b.Navigation("comment");

                    b.Navigation("customer");

                    b.Navigation("evaluate");
                });

            modelBuilder.Entity("BookShopDAL.Entity.Customer_Promotion", b =>
                {
                    b.HasOne("BookShopDAL.Entity.Customer", "customer")
                        .WithMany("customer_Promotions")
                        .HasForeignKey("Id_Customer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookShopDAL.Entity.Promotion", "promotion")
                        .WithMany("customer_Promotions")
                        .HasForeignKey("Id_Promotion")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("customer");

                    b.Navigation("promotion");
                });

            modelBuilder.Entity("BookShopDAL.Entity.Delivery_Address", b =>
                {
                    b.HasOne("BookShopDAL.Entity.Customer", "customer")
                        .WithMany("delivery_Addresses")
                        .HasForeignKey("Id_Customer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customer");
                });

            modelBuilder.Entity("BookShopDAL.Entity.Evaluate", b =>
                {
                    b.HasOne("BookShopDAL.Entity.Book", "book")
                        .WithMany("evaluates")
                        .HasForeignKey("Id_Book")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookShopDAL.Entity.Customer", "customer")
                        .WithMany("evaluates")
                        .HasForeignKey("Id_Customer")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("book");

                    b.Navigation("customer");
                });

            modelBuilder.Entity("BookShopDAL.Entity.Image", b =>
                {
                    b.HasOne("BookShopDAL.Entity.Author", "author")
                        .WithMany("images")
                        .HasForeignKey("Id_Parents")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BookShopDAL.Entity.Book", "book")
                        .WithMany("images")
                        .HasForeignKey("Id_Parents")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BookShopDAL.Entity.Publisher", "publisher")
                        .WithMany("images")
                        .HasForeignKey("Id_Parents")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BookShopDAL.Entity.Shop", "shop")
                        .WithMany("images")
                        .HasForeignKey("Id_Parents")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("author");

                    b.Navigation("book");

                    b.Navigation("publisher");

                    b.Navigation("shop");
                });

            modelBuilder.Entity("BookShopDAL.Entity.Order", b =>
                {
                    b.HasOne("BookShopDAL.Entity.Delivery_Address", "delivery_address")
                        .WithMany("orders")
                        .HasForeignKey("Id_Address")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BookShopDAL.Entity.Customer", "customer")
                        .WithMany("orders")
                        .HasForeignKey("Id_Customer")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BookShopDAL.Entity.Payment_Form", "payment_Form")
                        .WithMany("orders")
                        .HasForeignKey("Id_PaymentForm")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("customer");

                    b.Navigation("delivery_address");

                    b.Navigation("payment_Form");
                });

            modelBuilder.Entity("BookShopDAL.Entity.Order_Book", b =>
                {
                    b.HasOne("BookShopDAL.Entity.Book", "book")
                        .WithMany("order_Books")
                        .HasForeignKey("Id_Book")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookShopDAL.Entity.Order", "order")
                        .WithMany("order_Books")
                        .HasForeignKey("Id_Order")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("book");

                    b.Navigation("order");
                });

            modelBuilder.Entity("BookShopDAL.Entity.Order_Promotion", b =>
                {
                    b.HasOne("BookShopDAL.Entity.Order", "order")
                        .WithMany("order_Promotions")
                        .HasForeignKey("Id_Order")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookShopDAL.Entity.Promotion", "promotion")
                        .WithMany("order_Promotions")
                        .HasForeignKey("Id_Promotion")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("order");

                    b.Navigation("promotion");
                });

            modelBuilder.Entity("BookShopDAL.Entity.Promotion", b =>
                {
                    b.HasOne("BookShopDAL.Entity.Promotion_Type", "promotion_Type")
                        .WithMany("promotions")
                        .HasForeignKey("Id_PromotionType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("promotion_Type");
                });

            modelBuilder.Entity("BookShopDAL.Entity.ReturnOrder", b =>
                {
                    b.HasOne("BookShopDAL.Entity.Order", "order")
                        .WithMany("returnOrders")
                        .HasForeignKey("Id_Order")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("order");
                });

            modelBuilder.Entity("BookShopDAL.Entity.WishList", b =>
                {
                    b.HasOne("BookShopDAL.Entity.Book", "book")
                        .WithMany("wishLists")
                        .HasForeignKey("Id_Book")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookShopDAL.Entity.Customer", "customer")
                        .WithMany("wishLists")
                        .HasForeignKey("Id_Customer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("book");

                    b.Navigation("customer");
                });

            modelBuilder.Entity("BookShopDAL.Entity.Author", b =>
                {
                    b.Navigation("book_Authors");

                    b.Navigation("images");
                });

            modelBuilder.Entity("BookShopDAL.Entity.Book", b =>
                {
                    b.Navigation("book_Authors");

                    b.Navigation("book_Promotions");

                    b.Navigation("carts");

                    b.Navigation("comments");

                    b.Navigation("evaluates");

                    b.Navigation("images");

                    b.Navigation("order_Books");

                    b.Navigation("wishLists");
                });

            modelBuilder.Entity("BookShopDAL.Entity.Brand", b =>
                {
                    b.Navigation("books");
                });

            modelBuilder.Entity("BookShopDAL.Entity.Collection_Book", b =>
                {
                    b.Navigation("books");
                });

            modelBuilder.Entity("BookShopDAL.Entity.Comment", b =>
                {
                    b.Navigation("comments");
                });

            modelBuilder.Entity("BookShopDAL.Entity.Customer", b =>
                {
                    b.Navigation("carts");

                    b.Navigation("comments");

                    b.Navigation("customer_Promotions");

                    b.Navigation("delivery_Addresses");

                    b.Navigation("evaluates");

                    b.Navigation("orders");

                    b.Navigation("wishLists");
                });

            modelBuilder.Entity("BookShopDAL.Entity.Delivery_Address", b =>
                {
                    b.Navigation("orders");
                });

            modelBuilder.Entity("BookShopDAL.Entity.Evaluate", b =>
                {
                    b.Navigation("comments");
                });

            modelBuilder.Entity("BookShopDAL.Entity.Genre", b =>
                {
                    b.Navigation("books");
                });

            modelBuilder.Entity("BookShopDAL.Entity.Order", b =>
                {
                    b.Navigation("order_Books");

                    b.Navigation("order_Promotions");

                    b.Navigation("returnOrders");
                });

            modelBuilder.Entity("BookShopDAL.Entity.Payment_Form", b =>
                {
                    b.Navigation("orders");
                });

            modelBuilder.Entity("BookShopDAL.Entity.Promotion", b =>
                {
                    b.Navigation("book_Promotions");

                    b.Navigation("customer_Promotions");

                    b.Navigation("order_Promotions");
                });

            modelBuilder.Entity("BookShopDAL.Entity.Promotion_Type", b =>
                {
                    b.Navigation("promotions");
                });

            modelBuilder.Entity("BookShopDAL.Entity.Publisher", b =>
                {
                    b.Navigation("books");

                    b.Navigation("images");
                });

            modelBuilder.Entity("BookShopDAL.Entity.Shop", b =>
                {
                    b.Navigation("images");
                });
#pragma warning restore 612, 618
        }
    }
}
